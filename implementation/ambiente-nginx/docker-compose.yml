version: '2'

services:
  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: nginx_load_balancer
    ports:
      - "80:80" # Porta onde o Nginx irá ouvir
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf # Arquivo de configuração do Nginx
    depends_on:
      - reserve_http01
      - reserve_http02
      - reserve_http03
      - reserve_http04
      - reserve_http05
      # - reserve_websocket01
      # - reserve_websocket02
      # - reserve_websocket03
      # - reserve_websocket04
      # - reserve_websocket05
      - auth_service
      - evento_service
      - payment_service
    deploy:
      resources:
        limits: 
          cpus: '0.10'
          memory: '0.5GB'
    network_mode: host

  # cadvisor:
  #   container_name: cadvisor
  #   image: gcr.io/cadvisor/cadvisor:latest
  #   ports:
  #     - "8080:8080"
  #   volumes: 
  #     - "/:/rootfs"
  #     - "/var/run:/var/run"
  #     - "/sys:/sys"
  #     - "/var/lib/docker/:/var/lib/docker"
  #     - "/dev/disk/:/dev/disk"
  #   privileged: true
  #   devices: 
  #     - "/dev/kmsg"

  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #     - ./alert.rules.yml:/etc/prometheus/alert.rules.yml  # Volume para o arquivo de regras de alerta
  #   depends_on:
  #     - cadvisor
  #     - alertmanager

  # flask_server:
  #   build:
  #     context: ./container-servico-scaleflask
  #     dockerfile: Dockerfile
  #   container_name: flask_server
  #   ports:
  #     - "10000:10000"  # Porta exposta para o servidor Flask
  #   volumes:
  #     - ./script_de_escalonamento.sh:/app/script_de_escalonamento.sh  # Volume para o script de escalonamento
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #     - DOCKER_HOST=unix:///var/run/docker.sock
  #   depends_on:
  #     - cadvisor
  #     - alertmanager
  #     - prometheus

  # alertmanager:
  #   image: prom/alertmanager
  #   container_name: alertmanager
  #   ports:
  #     - "9093:9093"
  #   volumes:
  #     - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml

  # kong:
  #   image: kong:3.1
  #   container_name: kong
  #   ports:
  #     - "9999:8000"  # Porta exposta para as requisições HTTP (API Gateway)
  #     - "8443:8443"  # Para HTTPS, se necessário
  #   environment:
  #     KONG_DATABASE: "off"  # Usando modo sem banco de dados (modo declarativo)
  #     KONG_PROXY_LISTENER: "0.0.0.0:8000"  # Ouvir em todas as interfaces na porta 8000
  #     KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yml  # Caminho para o arquivo declarativo
  #   volumes:
  #     - ./kong.conf:/etc/kong/kong.conf  # Configuração personalizada (opcional)
  #     - ./kong.yml:/etc/kong/kong.yml  # O arquivo de configuração do Kong
  #   depends_on:
  #     - auth_service
  #     - evento_service
  #     - payment_service
  #     - reserve01
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.25'
  #         memory: '0.5GB'


  # PostgreSQL Service
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: reservas
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # Script de inicialização
    deploy:
      resources:
        limits:
          cpus: '0.03'
          memory: '1.0GB'
    network_mode: host          
    

  # Redis Service
  redis:
    build:
      context: ./container-servico-redis
      dockerfile: Dockerfile
    container_name: redis
    image: ticket-safe:redis-sync
    ports:
      - "6379:6379"
    environment:
      PG_HOST: localhost 
      PG_PORT: 5432
      PG_USER: user
      PG_PASSWORD: password
      PG_DATABASE: reservas
      REDIS_HOST: localhost
      REDIS_PORT: 6379
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: '0.5GB'
    depends_on:
      - postgres
    command: >
      bash -c "until nc -z -v -w30 localhost 5432; do echo 'Waiting for PostgreSQL...'; sleep 5; done;
      redis-server /usr/local/etc/redis/redis.conf"
    network_mode: host          
    



  # Auth Service
  auth_service:
    hostname: auth_service
    build:
      context: ./container-servico-auth
      dockerfile: Dockerfile
    image: ticket-safe:auth-service
    environment:
      - PORT=5000
      - REDIS_HOST=localhost       # Nome do serviço Redis definido no docker-compose
      - REDIS_PORT=6379               # Porta do Redis
      - PG_HOST=localhost      # Nome do serviço PostgreSQL definido no docker-compose
      - PG_PORT=5432                  # Porta do PostgreSQL
      - PG_USER=user                  # Nome do usuário do PostgreSQL
      - PG_PASSWORD=password          # Senha do PostgreSQL
      - PG_DATABASE=reservas          # Nome do banco de dados
      - JWT_SECRET=ticketsafejwt      # Segredo JWT (troque por um valor seguro em produção)
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    command: >
      bash -c "until nc -z -v -w30 localhost 5432; do echo 'Waiting for PostgreSQL...'; sleep 5; done; npm start"
    deploy:
      resources:
        limits:
          cpus: '0.03'
          memory: '0.2GB'
    network_mode: host          
    


  # Evento Service
  evento_service:
    hostname: evento_service
    build:
      context: ./container-servico-eventos
      dockerfile: Dockerfile  
    image: ticket-safe:evento-service
    environment:
      - PORT=5001
      - REDIS_HOST=localhost       # Nome do serviço Redis definido no docker-compose
      - REDIS_PORT=6379               # Porta do Redis
      - PG_HOST=localhost      # Nome do serviço PostgreSQL definido no docker-compose
      - PG_PORT=5432                  # Porta do PostgreSQL
      - PG_USER=user                  # Nome do usuário do PostgreSQL
      - PG_PASSWORD=password          # Senha do PostgreSQL
      - PG_DATABASE=reservas          # Nome do banco de dados
      - JWT_SECRET=ticketsafejwt      # Segredo JWT (troque por um valor seguro em produção)
    ports:
      - "5001:5001"
    depends_on:
      - postgres
      - redis
    command: >
      bash -c "until nc -z -v -w30 localhost 5432; do echo 'Waiting for PostgreSQL...'; sleep 5; done; npm start"
    deploy:
      resources:
        limits:
          cpus: '0.03'
          memory: '0.2GB'
    network_mode: host          
    


  # Payment Service
  payment_service:
    hostname: payment_service
    build:
      context: ./container-servico-pagamento
      dockerfile: Dockerfile
    image: ticket-safe:payment-service
    environment:
      - PORT=5002
      - REDIS_HOST=localhost       # Nome do serviço Redis definido no docker-compose
      - REDIS_PORT=6379               # Porta do Redis
      - PG_HOST=localhost      # Nome do serviço PostgreSQL definido no docker-compose
      - PG_PORT=5432                  # Porta do PostgreSQL
      - PG_USER=user                  # Nome do usuário do PostgreSQL
      - PG_PASSWORD=password          # Senha do PostgreSQL
      - PG_DATABASE=reservas          # Nome do banco de dados
      - JWT_SECRET=ticketsafejwt      # Segredo JWT (troque por um valor seguro em produção)
    ports:
      - "5002:5002"
    depends_on:
      - postgres
      - redis    
    command: >
      bash -c "until nc -z -v -w30 localhost 5432; do echo 'Waiting for PostgreSQL...'; sleep 5; done; npm start"
    deploy:
      resources:
        limits:
          cpus: '0.03'
          memory: '0.2GB'
    network_mode: host          
    


  # Reserve Service01
  reserve_http01:
    hostname: reserve_http01
    container_name: reserve_http01
    build:
      context: ./container-servico-reserva-http
      dockerfile: Dockerfile
    image: ticket-safe:reserve-http-service
    environment:
      - PORT=9501
      - REDIS_HOST=localhost       # Nome do serviço Redis definido no docker-compose
      - REDIS_PORT=6379               # Porta do Redis
      - PG_HOST=localhost      # Nome do serviço PostgreSQL definido no docker-compose
      - PG_PORT=5432                  # Porta do PostgreSQL
      - PG_USER=user                  # Nome do usuário do PostgreSQL
      - PG_PASSWORD=password          # Senha do PostgreSQL
      - PG_DATABASE=reservas          # Nome do banco de dados
      - JWT_SECRET=ticketsafejwt      # Segredo JWT (troque por um valor seguro em produção)
      - CLUSTER=true
      - CLUSTER_WORKERS=6
    depends_on:
      - postgres
      - redis
    ports:
      - "9501:9501"      
    command: >
      bash -c "until nc -z -v -w30 localhost 5432; do echo 'Waiting for PostgreSQL...'; sleep 5; done; npm start"
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: '0.5GB'
    network_mode: host          
    



  # Reserve Service01
  reserve_http02:
    hostname: reserve_http02
    container_name: reserve_http02
    build:
      context: ./container-servico-reserva-http
      dockerfile: Dockerfile
    image: ticket-safe:reserve-http-service
    environment:
      - PORT=9502
      - REDIS_HOST=localhost       # Nome do serviço Redis definido no docker-compose
      - REDIS_PORT=6379               # Porta do Redis
      - PG_HOST=localhost      # Nome do serviço PostgreSQL definido no docker-compose
      - PG_PORT=5432                  # Porta do PostgreSQL
      - PG_USER=user                  # Nome do usuário do PostgreSQL
      - PG_PASSWORD=password          # Senha do PostgreSQL
      - PG_DATABASE=reservas          # Nome do banco de dados
      - JWT_SECRET=ticketsafejwt      # Segredo JWT (troque por um valor seguro em produção)
      - CLUSTER=true
      - CLUSTER_WORKERS=6
    depends_on:
      - postgres
      - redis
    ports:
      - "9502:9502"      
    command: >
      bash -c "until nc -z -v -w30 localhost 5432; do echo 'Waiting for PostgreSQL...'; sleep 5; done; npm start"
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: '0.5GB'
    network_mode: host          
    



  # Reserve Service01
  reserve_http03:
    hostname: reserve_http03
    container_name: reserve_http03
    build:
      context: ./container-servico-reserva-http
      dockerfile: Dockerfile
    image: ticket-safe:reserve-http-service
    environment:
      - PORT=9503
      - REDIS_HOST=localhost       # Nome do serviço Redis definido no docker-compose
      - REDIS_PORT=6379               # Porta do Redis
      - PG_HOST=localhost      # Nome do serviço Po9501stgreSQL definido no docker-compose
      - PG_PORT=5432                  # Porta do PostgreSQL
      - PG_USER=user                  # Nome do usuário do PostgreSQL
      - PG_PASSWORD=password          # Senha do PostgreSQL
      - PG_DATABASE=reservas          # Nome do banco de dados
      - JWT_SECRET=ticketsafejwt      # Segredo JWT (troque por um valor seguro em produção)
      - CLUSTER=true
      - CLUSTER_WORKERS=6
    depends_on:
      - postgres
      - redis
    ports:
      - "9503:9503"      
    command: >
      bash -c "until nc -z -v -w30 localhost 5432; do echo 'Waiting for PostgreSQL...'; sleep 5; done; npm start"
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: '0.5GB'
    network_mode: host          
    

  # Reserve Service01
  reserve_http04:
    hostname: reserve_http04
    container_name: reserve_http04
    build:
      context: ./container-servico-reserva-http
      dockerfile: Dockerfile
    image: ticket-safe:reserve-http-service
    environment:
      - PORT=9504
      - REDIS_HOST=localhost       # Nome do serviço Redis definido no docker-compose
      - REDIS_PORT=6379               # Porta do Redis
      - PG_HOST=localhost      # Nome do serviço Po9501stgreSQL definido no docker-compose
      - PG_PORT=5432                  # Porta do PostgreSQL
      - PG_USER=user                  # Nome do usuário do PostgreSQL
      - PG_PASSWORD=password          # Senha do PostgreSQL
      - PG_DATABASE=reservas          # Nome do banco de dados
      - JWT_SECRET=ticketsafejwt      # Segredo JWT (troque por um valor seguro em produção)
      - CLUSTER=true
      - CLUSTER_WORKERS=6
    depends_on:
      - postgres
      - redis
    ports:
      - "9504:9504"      
    command: >
      bash -c "until nc -z -v -w30 localhost 5432; do echo 'Waiting for PostgreSQL...'; sleep 5; done; npm start"
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: '0.5GB'
    network_mode: host          
    


  # Reserve Service01
  reserve_http05:
    hostname: reserve_http05
    container_name: reserve_http05
    build:
      context: ./container-servico-reserva-http
      dockerfile: Dockerfile
    image: ticket-safe:reserve-http-service
    environment:
      - PORT=9505
      - REDIS_HOST=localhost       # Nome do serviço Redis definido no docker-compose
      - REDIS_PORT=6379               # Porta do Redis
      - PG_HOST=localhost      # Nome do serviço Po9501stgreSQL definido no docker-compose
      - PG_PORT=5432                  # Porta do PostgreSQL
      - PG_USER=user                  # Nome do usuário do PostgreSQL
      - PG_PASSWORD=password          # Senha do PostgreSQL
      - PG_DATABASE=reservas          # Nome do banco de dados
      - JWT_SECRET=ticketsafejwt      # Segredo JWT (troque por um valor seguro em produção)
      - CLUSTER=true
      - CLUSTER_WORKERS=6
    depends_on:
      - postgres
      - redis
    ports:
      - "9505:9505"      
    command: >
      bash -c "until nc -z -v -w30 localhost 5432; do echo 'Waiting for PostgreSQL...'; sleep 5; done; npm start"
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: '0.5GB'
    network_mode: host          
    




  # # Reserve Service01
  # reserve_websocket01:
  #   hostname: reserve_websocket01
  #   container_name: reserve_websocket01
  #   build:
  #     context: ./container-servico-reserva-websocket
  #     dockerfile: Dockerfile
  #   image: ticket-safe:reserve-websocket-service
  #   environment:
  #     - PORT=9501
  #     - REDIS_HOST=localhost       # Nome do serviço Redis definido no docker-compose
  #     - REDIS_PORT=6379               # Porta do Redis
  #     - PG_HOST=localhost      # Nome do serviço PostgreSQL definido no docker-compose
  #     - PG_PORT=5432                  # Porta do PostgreSQL
  #     - PG_USER=user                  # Nome do usuário do PostgreSQL
  #     - PG_PASSWORD=password          # Senha do PostgreSQL
  #     - PG_DATABASE=reservas          # Nome do banco de dados
  #     - JWT_SECRET=ticketsafejwt      # Segredo JWT (troque por um valor seguro em produção)
  #     - CLUSTER=true
  #     - CLUSTER_WORKERS=6
  #   depends_on:
  #     - postgres
  #     - redis
  #   ports:
  #     - "9501:9501"      
  #   command: >
  #     bash -c "until nc -z -v -w30 localhost 5432; do echo 'Waiting for PostgreSQL...'; sleep 5; done; npm start"
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.10'
  #         memory: '0.5GB'
  #   network_mode: host          
    



  # # Reserve Service01
  # reserve_websocket02:
  #   hostname: reserve_websocket02
  #   container_name: reserve_websocket02
  #   build:
  #     context: ./container-servico-reserva-websocket
  #     dockerfile: Dockerfile
  #   image: ticket-safe:reserve-websocket-service
  #   environment:
  #     - PORT=9502
  #     - REDIS_HOST=localhost       # Nome do serviço Redis definido no docker-compose
  #     - REDIS_PORT=6379               # Porta do Redis
  #     - PG_HOST=localhost      # Nome do serviço PostgreSQL definido no docker-compose
  #     - PG_PORT=5432                  # Porta do PostgreSQL
  #     - PG_USER=user                  # Nome do usuário do PostgreSQL
  #     - PG_PASSWORD=password          # Senha do PostgreSQL
  #     - PG_DATABASE=reservas          # Nome do banco de dados
  #     - JWT_SECRET=ticketsafejwt      # Segredo JWT (troque por um valor seguro em produção)
  #     - CLUSTER=true
  #     - CLUSTER_WORKERS=6
  #   depends_on:
  #     - postgres
  #     - redis
  #   ports:
  #     - "9502:9502"      
  #   command: >
  #     bash -c "until nc -z -v -w30 localhost 5432; do echo 'Waiting for PostgreSQL...'; sleep 5; done; npm start"
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.10'
  #         memory: '0.5GB'
  #   network_mode: host          
    



  # # Reserve Service01
  # reserve_websocket03:
  #   hostname: reserve_websocket03
  #   container_name: reserve_websocket03
  #   build:
  #     context: ./container-servico-reserva-websocket
  #     dockerfile: Dockerfile
  #   image: ticket-safe:reserve-websocket-service
  #   environment:
  #     - PORT=9503
  #     - REDIS_HOST=localhost       # Nome do serviço Redis definido no docker-compose
  #     - REDIS_PORT=6379               # Porta do Redis
  #     - PG_HOST=localhost      # Nome do serviço Po9501stgreSQL definido no docker-compose
  #     - PG_PORT=5432                  # Porta do PostgreSQL
  #     - PG_USER=user                  # Nome do usuário do PostgreSQL
  #     - PG_PASSWORD=password          # Senha do PostgreSQL
  #     - PG_DATABASE=reservas          # Nome do banco de dados
  #     - JWT_SECRET=ticketsafejwt      # Segredo JWT (troque por um valor seguro em produção)
  #     - CLUSTER=true
  #     - CLUSTER_WORKERS=6
  #   depends_on:
  #     - postgres
  #     - redis
  #   ports:
  #     - "9503:9503"      
  #   command: >
  #     bash -c "until nc -z -v -w30 localhost 5432; do echo 'Waiting for PostgreSQL...'; sleep 5; done; npm start"
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.10'
  #         memory: '0.5GB'
  #   network_mode: host          
    

  # # Reserve Service01
  # reserve_websocket04:
  #   hostname: reserve_websocket04
  #   container_name: reserve_websocket04
  #   build:
  #     context: ./container-servico-reserva-websocket
  #     dockerfile: Dockerfile
  #   image: ticket-safe:reserve-websocket-service
  #   environment:
  #     - PORT=9504
  #     - REDIS_HOST=localhost       # Nome do serviço Redis definido no docker-compose
  #     - REDIS_PORT=6379               # Porta do Redis
  #     - PG_HOST=localhost      # Nome do serviço Po9501stgreSQL definido no docker-compose
  #     - PG_PORT=5432                  # Porta do PostgreSQL
  #     - PG_USER=user                  # Nome do usuário do PostgreSQL
  #     - PG_PASSWORD=password          # Senha do PostgreSQL
  #     - PG_DATABASE=reservas          # Nome do banco de dados
  #     - JWT_SECRET=ticketsafejwt      # Segredo JWT (troque por um valor seguro em produção)
  #     - CLUSTER=true
  #     - CLUSTER_WORKERS=6
  #   depends_on:
  #     - postgres
  #     - redis
  #   ports:
  #     - "9504:9504"      
  #   command: >
  #     bash -c "until nc -z -v -w30 localhost 5432; do echo 'Waiting for PostgreSQL...'; sleep 5; done; npm start"
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.10'
  #         memory: '0.5GB'
  #   network_mode: host          
    


  # # Reserve Service01
  # reserve_websocket05:
  #   hostname: reserve_websocket05
  #   container_name: reserve_websocket05
  #   build:
  #     context: ./container-servico-reserva-websocket
  #     dockerfile: Dockerfile
  #   image: ticket-safe:reserve-websocket-service
  #   environment:
  #     - PORT=9505
  #     - REDIS_HOST=localhost       # Nome do serviço Redis definido no docker-compose
  #     - REDIS_PORT=6379               # Porta do Redis
  #     - PG_HOST=localhost      # Nome do serviço Po9501stgreSQL definido no docker-compose
  #     - PG_PORT=5432                  # Porta do PostgreSQL
  #     - PG_USER=user                  # Nome do usuário do PostgreSQL
  #     - PG_PASSWORD=password          # Senha do PostgreSQL
  #     - PG_DATABASE=reservas          # Nome do banco de dados
  #     - JWT_SECRET=ticketsafejwt      # Segredo JWT (troque por um valor seguro em produção)
  #     - CLUSTER=true
  #     - CLUSTER_WORKERS=6
  #   depends_on:
  #     - postgres
  #     - redis
  #   ports:
  #     - "9505:9505"      
  #   command: >
  #     bash -c "until nc -z -v -w30 localhost 5432; do echo 'Waiting for PostgreSQL...'; sleep 5; done; npm start"
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.10'
  #         memory: '0.5GB'
  #   network_mode: host          
    






    
  # Worker Cancel Service
  worker_cancel:
    build:
      context: ./container-servico-workercancel
      dockerfile: Dockerfile  
    image: ticket-safe:cancel-worker
    environment:
      - PORT=5003
      - REDIS_HOST=localhost       # Nome do serviço Redis definido no docker-compose
      - REDIS_PORT=6379               # Porta do Redis
      - PG_HOST=localhost      # Nome do serviço PostgreSQL definido no docker-compose
      - PG_PORT=5432                  # Porta do PostgreSQL
      - PG_USER=user                  # Nome do usuário do PostgreSQL
      - PG_PASSWORD=password          # Senha do PostgreSQL
      - PG_DATABASE=reservas          # Nome do banco de dados
      - JWT_SECRET=ticketsafejwt      # Segredo JWT (troque por um valor seguro em produção)
    depends_on:
      - postgres
      - redis 
    ports:
      - "5003:5003"           
    command: >
      bash -c "until nc -z -v -w30 localhost 5432; do echo 'Waiting for PostgreSQL...'; sleep 5; done; npm start"
    deploy:
      resources:
        limits:
          cpus: '0.03'
          memory: '0.2GB'
    network_mode: host          
    


  # Worker Confirmation Service
  worker_confirmation:
    build:
      context: ./container-servico-workerconfirm
      dockerfile: Dockerfile  
    image: ticket-safe:confirmation-worker
    environment:
      - PORT=5004
      - REDIS_HOST=localhost       # Nome do serviço Redis definido no docker-compose
      - REDIS_PORT=6379               # Porta do Redis
      - PG_HOST=localhost      # Nome do serviço PostgreSQL definido no docker-compose
      - PG_PORT=5432                  # Porta do PostgreSQL
      - PG_USER=user                  # Nome do usuário do PostgreSQL
      - PG_PASSWORD=password          # Senha do PostgreSQL
      - PG_DATABASE=reservas          # Nome do banco de dados
      - JWT_SECRET=ticketsafejwt      # Segredo JWT (troque por um valor seguro em produção)
    depends_on:
      - postgres
      - redis    
    ports:
      - "5004:5004"         
    command: >
      bash -c "until nc -z -v -w30 localhost 5432; do echo 'Waiting for PostgreSQL...'; sleep 5; done; npm start"
    deploy:
      resources:
        limits:
          cpus: '0.03'
          memory: '0.2GB'
    network_mode: host          
    


  # Worker save reserve
  worker-save-reserve01:
    build:
      context: ./container-servico-workerSaveReserve
      dockerfile: Dockerfile  
    image: ticket-safe:save-worker
    environment:
      - PORT=5005
      - CONSUMER_ID=5005
      - REDIS_HOST=localhost       # Nome do serviço Redis definido no docker-compose
      - REDIS_PORT=6379               # Porta do Redis
      - PG_HOST=localhost      # Nome do serviço PostgreSQL definido no docker-compose
      - PG_PORT=5432                  # Porta do PostgreSQL
      - PG_USER=user                  # Nome do usuário do PostgreSQL
      - PG_PASSWORD=password          # Senha do PostgreSQL
      - PG_DATABASE=reservas          # Nome do banco de dados
      - JWT_SECRET=ticketsafejwt      # Segredo JWT (troque por um valor seguro em produção)
    depends_on:
      - postgres
      - redis    
    ports:
      - "5005:5005"       
    command: >
      bash -c "until nc -z -v -w30 localhost 5432; do echo 'Waiting for PostgreSQL...'; sleep 5; done; npm start"
    deploy:
      resources:
        limits:
          cpus: '0.08'
          memory: '0.2GB'
    network_mode: host          
    

  # Worker save reserve
  worker-save-reserve02:
    build:
      context: ./container-servico-workerSaveReserve
      dockerfile: Dockerfile  
    image: ticket-safe:save-worker
    environment:
      - PORT=5008
      - CONSUMER_ID=5008
      - REDIS_HOST=localhost       # Nome do serviço Redis definido no docker-compose
      - REDIS_PORT=6379               # Porta do Redis
      - PG_HOST=localhost      # Nome do serviço PostgreSQL definido no docker-compose
      - PG_PORT=5432                  # Porta do PostgreSQL
      - PG_USER=user                  # Nome do usuário do PostgreSQL
      - PG_PASSWORD=password          # Senha do PostgreSQL
      - PG_DATABASE=reservas          # Nome do banco de dados
      - JWT_SECRET=ticketsafejwt      # Segredo JWT (troque por um valor seguro em produção)
    depends_on:
      - postgres
      - redis    
    ports:
      - "5008:5008"       
    command: >
      bash -c "until nc -z -v -w30 localhost 5432; do echo 'Waiting for PostgreSQL...'; sleep 5; done; npm start"
    deploy:
      resources:
        limits:
          cpus: '0.08'
          memory: '0.2GB'
    network_mode: host          
    
  # Worker Sync Service
  worker_sync:
    build:
      context: ./container-servico-workersync
      dockerfile: Dockerfile
    image: ticket-safe:sync-service
    environment:
      - PORT=5006
      - REDIS_HOST=localhost       # Nome do serviço Redis definido no docker-compose
      - REDIS_PORT=6379               # Porta do Redis
      - PG_HOST=localhost      # Nome do serviço PostgreSQL definido no docker-compose
      - PG_PORT=5432                  # Porta do PostgreSQL
      - PG_USER=user                  # Nome do usuário do PostgreSQL
      - PG_PASSWORD=password          # Senha do PostgreSQL
      - PG_DATABASE=reservas          # Nome do banco de dados
      - JWT_SECRET=ticketsafejwt      # Segredo JWT (troque por um valor seguro em produção)
    depends_on:
      - postgres
      - redis    
    ports:
      - "5006:5006"        
    command: >
      bash -c "until nc -z -v -w30 localhost 5432; do echo 'Waiting for PostgreSQL...'; sleep 5; done; npm start"
    deploy:
      resources:
        limits:
          cpus: '0.03'
          memory: '0.2GB'
    network_mode: host          

  # Worker process Reserve 
  worker-reserveWaiting:
    build:
      context: ./container-servico-workerReserveWaiting
      dockerfile: Dockerfile  
    image: ticket-safe:reserveWaiting-worker
    environment:
      - PORT=5007
      - REDIS_HOST=localhost       # Nome do serviço Redis definido no docker-compose
      - REDIS_PORT=6379               # Porta do Redis
      - PG_HOST=localhost      # Nome do serviço PostgreSQL definido no docker-compose
      - PG_PORT=5432                  # Porta do PostgreSQL
      - PG_USER=user                  # Nome do usuário do PostgreSQL
      - PG_PASSWORD=password          # Senha do PostgreSQL
      - PG_DATABASE=reservas          # Nome do banco de dados
      - JWT_SECRET=ticketsafejwt      # Segredo JWT (troque por um valor seguro em produção)
    depends_on:
      - postgres
      - redis    
    ports:
      - "5007:5007"       
    command: >
      bash -c "until nc -z -v -w30 localhost 5432; do echo 'Waiting for PostgreSQL...'; sleep 5; done; npm start"
    deploy:
      resources:
        limits:
          cpus: '0.03'
          memory: '0.2GB'
    network_mode: host          
    

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
